info: socket.io started
debug: client authorized
info: handshake authorized KP0ZiCx0nCNLXbC3n6g9
debug: setting request GET /socket.io/1/websocket/KP0ZiCx0nCNLXbC3n6g9
debug: set heartbeat interval for client KP0ZiCx0nCNLXbC3n6g9
debug: client authorized for 
debug: websocket writing 1::
New client
debug: websocket writing 5:1+::{"name":"name"}
debug: websocket writing 5:2+::{"name":"status"}
status: Active
{ id: 'KP0ZiCx0nCNLXbC3n6g9',
  namespace: 
   { manager: 
      { server: [Object],
        namespaces: [Object],
        sockets: [Circular],
        _events: [Object],
        settings: [Object],
        handshaken: [Object],
        connected: [Object],
        open: [Object],
        closed: {},
        rooms: [Object],
        roomClients: [Object],
        oldListeners: [Object],
        sequenceNumber: 127903805,
        gc: [Object] },
     name: '',
     sockets: { KP0ZiCx0nCNLXbC3n6g9: [Circular] },
     auth: false,
     flags: { endpoint: '', exceptions: [] },
     _events: { connection: [Object] } },
  manager: 
   { server: 
      { domain: null,
        _events: [Object],
        _maxListeners: 10,
        _connections: 1,
        connections: [Getter/Setter],
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        allowHalfOpen: true,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _connectionKey: '4:0.0.0.0:3000' },
     namespaces: { '': [Object] },
     sockets: 
      { manager: [Circular],
        name: '',
        sockets: [Object],
        auth: false,
        flags: [Object],
        _events: [Object] },
     _events: 
      { 'set:transports': [Object],
        'set:store': [Function],
        'set:origins': [Function],
        'set:flash policy port': [Function],
        'set:flash policy server': [Function] },
     settings: 
      { origins: '*:*',
        log: true,
        store: [Object],
        logger: [Object],
        static: [Object],
        heartbeats: true,
        resource: '/socket.io',
        transports: [Object],
        authorization: false,
        blacklist: [Object],
        'log level': 3,
        'log colors': false,
        'close timeout': 60,
        'heartbeat interval': 25,
        'heartbeat timeout': 60,
        'polling duration': 20,
        'flash policy server': true,
        'flash policy port': 10843,
        'destroy upgrade': true,
        'destroy buffer size': 100000000,
        'browser client': true,
        'browser client cache': true,
        'browser client minification': false,
        'browser client etag': false,
        'browser client expires': 315360000,
        'browser client gzip': false,
        'browser client handler': false,
        'client store expiration': 15,
        'match origin protocol': false },
     handshaken: { KP0ZiCx0nCNLXbC3n6g9: [Object] },
     connected: { KP0ZiCx0nCNLXbC3n6g9: true },
     open: { KP0ZiCx0nCNLXbC3n6g9: true },
     closed: {},
     rooms: { '': [Object] },
     roomClients: { KP0ZiCx0nCNLXbC3n6g9: [Object] },
     oldListeners: [ [Object] ],
     sequenceNumber: 127903805,
     gc: 
      { _idleTimeout: 10000,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 1383107373123,
        _onTimeout: [Function: wrapper],
        _repeat: true } },
  disconnected: false,
  ackPackets: 2,
  acks: { '1': [Function], '2': [Function] },
  flags: { endpoint: '', room: '' },
  readable: true,
  store: 
   { store: { options: undefined, clients: [Object], manager: [Object] },
     id: 'KP0ZiCx0nCNLXbC3n6g9',
     data: { name: 'nginx' } },
  _events: 
   { error: [Function],
     message: [Function],
     disconnect: [Function] } }
name: nginx
